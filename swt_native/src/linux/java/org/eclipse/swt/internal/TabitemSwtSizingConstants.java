package org.eclipse.swt.internal;

import static java.lang.Math.max;

/**
 * Provides sizing constants and calculation methods for the Tabitem widget.
 * Generated by WidgetsSizeConstantsGenerator.
 * DO NOT EDIT MANUALLY - Re-generate instead.
 */
public final class TabitemSwtSizingConstants {

    private TabitemSwtSizingConstants() {
        // Prevent instantiation
    }

    // --- Sizing Constants ---
    public static final double RIGHT_PADDING = 2.0;
    public static final double ICON_SIZE = 16.0;
    public static final double ICON_BOTTOM_PADDING = 1.0;
    public static final double ICON_RIGHT_PADDING = 3.0;
    public static final double TEXT_BOTTOM_PADDING = 2.0;
    public static final double AVERAGE_CHAR_WIDTH = 7.0;
    public static final double TEXT_HEIGHT = 16.0;

    // --- Size Calculation Methods ---
    /**
     * Calculates the required width for a 'DEFAULT' style widget.
     * Notes: TabItem consists of an optional icon followed by text, with specific padding values. The height is determined by the taller of the two elements (icon or text).
     * Formula: rightPadding + (hasImage ? (iconSize + iconRightPadding) : 0) + (hasText ? (textLength * averageCharWidth) : 0)
     * @param hasImage A boolean flag for hasImage.
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @return The calculated width.
     */
    public static double calculateDefaultWidth(boolean hasImage, boolean hasText, double textLength) {
        return RIGHT_PADDING + (hasImage ? (ICON_SIZE + ICON_RIGHT_PADDING) : 0.0) + (hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0);
    }

    /**
     * Calculates the required height for a 'DEFAULT' style widget.
     * Notes: TabItem consists of an optional icon followed by text, with specific padding values. The height is determined by the taller of the two elements (icon or text).
     * Formula: max(textHeight + textBottomPadding, hasImage ? (iconSize + iconBottomPadding) : 0)
     * @param hasImage A boolean flag for hasImage.
     * @return The calculated height.
     */
    public static double calculateDefaultHeight(boolean hasImage) {
        return max(TEXT_HEIGHT + TEXT_BOTTOM_PADDING, hasImage ? (ICON_SIZE + ICON_BOTTOM_PADDING) : 0.0);
    }

}
