package org.eclipse.swt.internal;

import static java.lang.Math.max;

/**
 * Provides sizing constants and calculation methods for the Tabfolder widget.
 * Generated by WidgetsSizeConstantsGenerator.
 * DO NOT EDIT MANUALLY - Re-generate instead.
 */
public final class TabfolderSwtSizingConstants {

    private TabfolderSwtSizingConstants() {
        // Prevent instantiation
    }

    // --- Sizing Constants ---
    public static final double TAB_BAR_HEIGHT = 28.0;
    public static final double TAB_HORIZONTAL_PADDING = 8.0;
    public static final double TAB_VERTICAL_PADDING = 0.0;
    public static final double TAB_SPACING = 0.0;
    public static final double BORDER_WIDTH = 1.0;
    public static final double ACTIVE_TAB_INDICATOR_WIDTH = 2.0;
    public static final double TAB_ICON_SIZE = 16.0;
    public static final double TAB_ICON_SPACING = 3.0;
    public static final double CLOSE_ICON_SIZE = 14.0;
    public static final double CLOSE_ICON_SPACING = 6.0;
    public static final double STATUS_ICON_SIZE = 16.0;
    public static final double STATUS_ICON_SPACING = 8.0;
    public static final double STATUS_AREA_PADDING = 4.0;
    public static final double TAB_FONT_SIZE = 12.0;
    public static final double AVERAGE_CHAR_WIDTH = 7.0;
    public static final double TEXT_BOTTOM_PADDING = 2.0;

    // --- Size Calculation Methods ---
    /**
     * Calculates the required width for a 'DEFAULT' style widget.
     * Notes: TabFolder consists of a fixed-height tab bar (28px) at the top and an expandable content area below. The width depends on the number of tabs, their content (text, icons), and the status area on the right. Each tab has horizontal padding, potentially an icon, text, and a close button.
     * Formula: max(minContainerWidth, (numTabs * ((hasText ? (textLength * averageCharWidth) : 0) + (hasImage ? (tabIconSize + (hasText ? tabIconSpacing : 0)) : 0) + (hasCloseButton ? (closeIconSize + closeIconSpacing) : 0) + (2 * tabHorizontalPadding))) + statusAreaPadding + (2 * statusIconSize) + statusIconSpacing)
     * @param minContainerWidth A numeric (double) value for minContainerWidth.
     * @param numTabs A numeric (double) value for numTabs.
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @param hasImage A boolean flag for hasImage.
     * @param hasCloseButton A boolean flag for hasCloseButton.
     * @return The calculated width.
     */
    public static double calculateDefaultWidth(double minContainerWidth, double numTabs, boolean hasText, double textLength, boolean hasImage, boolean hasCloseButton) {
        return max(minContainerWidth, (numTabs * ((hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0) + (hasImage ? (TAB_ICON_SIZE + (hasText ? TAB_ICON_SPACING : 0.0)) : 0.0) + (hasCloseButton ? (CLOSE_ICON_SIZE + CLOSE_ICON_SPACING) : 0.0) + (2 * TAB_HORIZONTAL_PADDING))) + STATUS_AREA_PADDING + (2 * STATUS_ICON_SIZE) + STATUS_ICON_SPACING);
    }

    /**
     * Calculates the required height for a 'DEFAULT' style widget.
     * Notes: TabFolder consists of a fixed-height tab bar (28px) at the top and an expandable content area below. The width depends on the number of tabs, their content (text, icons), and the status area on the right. Each tab has horizontal padding, potentially an icon, text, and a close button.
     * Formula: tabBarHeight + contentHeight
     * @param contentHeight A numeric (double) value for contentHeight.
     * @return The calculated height.
     */
    public static double calculateDefaultHeight(double contentHeight) {
        return TAB_BAR_HEIGHT + contentHeight;
    }

    /**
     * Calculates the required width for a 'TAB' style widget.
     * Notes: Individual tab width depends on its content (text, icon, close button) plus padding. Height is fixed at 28px for all tabs.
     * Formula: (hasText ? (textLength * averageCharWidth) : 0) + (hasImage ? (tabIconSize + (hasText ? tabIconSpacing : 0)) : 0) + (hasCloseButton ? (closeIconSize + closeIconSpacing) : 0) + (2 * tabHorizontalPadding)
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @param hasImage A boolean flag for hasImage.
     * @param hasCloseButton A boolean flag for hasCloseButton.
     * @return The calculated width.
     */
    public static double calculateTabWidth(boolean hasText, double textLength, boolean hasImage, boolean hasCloseButton) {
        return (hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0) + (hasImage ? (TAB_ICON_SIZE + (hasText ? TAB_ICON_SPACING : 0.0)) : 0.0) + (hasCloseButton ? (CLOSE_ICON_SIZE + CLOSE_ICON_SPACING) : 0.0) + (2 * TAB_HORIZONTAL_PADDING);
    }

    /**
     * Calculates the required height for a 'TAB' style widget.
     * Notes: Individual tab width depends on its content (text, icon, close button) plus padding. Height is fixed at 28px for all tabs.
     * Formula: tabBarHeight
     * @return The calculated height.
     */
    public static double calculateTabHeight() {
        return TAB_BAR_HEIGHT;
    }

}
