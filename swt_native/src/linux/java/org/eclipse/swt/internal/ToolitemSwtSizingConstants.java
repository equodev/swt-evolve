package org.eclipse.swt.internal;

import static java.lang.Math.max;

/**
 * Provides sizing constants and calculation methods for the Toolitem widget.
 * Generated by WidgetsSizeConstantsGenerator.
 * DO NOT EDIT MANUALLY - Re-generate instead.
 */
public final class ToolitemSwtSizingConstants {

    private ToolitemSwtSizingConstants() {
        // Prevent instantiation
    }

    // --- Sizing Constants ---
    public static final double DEFAULT_BUTTON_HEIGHT = 30.0;
    public static final double DEFAULT_BUTTON_MIN_WIDTH = 70.0;
    public static final double HORIZONTAL_PADDING = 16.0;
    public static final double BORDER_RADIUS = 5.0;
    public static final double DEFAULT_ICON_SIZE = 24.0;
    public static final double SMALL_ICON_SIZE = 16.0;
    public static final double ICON_SPACING = 6.0;
    public static final double ICON_BUTTON_SIZE = 32.0;
    public static final double ICON_BUTTON_PADDING = 4.0;
    public static final double AVERAGE_CHAR_WIDTH = 8.0;
    public static final double DEFAULT_FONT_SIZE = 14.0;
    public static final double FONT_WEIGHT = 500.0;
    public static final double PUSH_BUTTON_HEIGHT = 30.0;
    public static final double PUSH_BUTTON_MIN_WIDTH = 70.0;
    public static final double CHECK_BOX_SIZE = 18.0;
    public static final double CHECK_BOX_TEXT_SPACING = 12.0;
    public static final double CHECK_BOX_VERTICAL_PADDING = 8.0;
    public static final double CHECK_BOX_HORIZONTAL_PADDING = 12.0;
    public static final double RADIO_BUTTON_SIZE = 20.0;
    public static final double RADIO_BUTTON_TEXT_SPACING = 12.0;
    public static final double RADIO_BUTTON_VERTICAL_PADDING = 8.0;
    public static final double RADIO_BUTTON_HORIZONTAL_PADDING = 12.0;
    public static final double DROPDOWN_BUTTON_HEIGHT = 50.0;
    public static final double DROPDOWN_BUTTON_MIN_WIDTH = 70.0;
    public static final double DROPDOWN_ARROW_SIZE = 20.0;
    public static final double DROPDOWN_ARROW_SPACING = 8.0;
    public static final double SEPARATOR_HEIGHT = 10.0;
    public static final double SEPARATOR_WIDTH = 10.0;
    public static final double SEPARATOR_THICKNESS = 1.5;

    // --- Size Calculation Methods ---
    /**
     * Calculates the required width for a 'PUSH' style widget.
     * Notes: Standard push button with optional text and image. For icon-only buttons, a circular container with padding is used.
     * Formula: max(pushButtonMinWidth, (hasText ? (textLength * averageCharWidth) : 0) + (hasImage ? (smallIconSize + (hasText ? iconSpacing : 0)) : 0) + (2 * horizontalPadding))
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @param hasImage A boolean flag for hasImage.
     * @return The calculated width.
     */
    public static double calculatePushWidth(boolean hasText, double textLength, boolean hasImage) {
        return max(PUSH_BUTTON_MIN_WIDTH, (hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0) + (hasImage ? (SMALL_ICON_SIZE + (hasText ? ICON_SPACING : 0.0)) : 0.0) + (2 * HORIZONTAL_PADDING));
    }

    /**
     * Calculates the required height for a 'PUSH' style widget.
     * Notes: Standard push button with optional text and image. For icon-only buttons, a circular container with padding is used.
     * Formula: pushButtonHeight
     * @return The calculated height.
     */
    public static double calculatePushHeight() {
        return PUSH_BUTTON_HEIGHT;
    }

    /**
     * Calculates the required width for a 'PUSH_ICON_ONLY' style widget.
     * Notes: Icon-only push button uses a circular container with the icon centered.
     * Formula: iconButtonSize
     * @return The calculated width.
     */
    public static double calculatePushIconOnlyWidth() {
        return ICON_BUTTON_SIZE;
    }

    /**
     * Calculates the required height for a 'PUSH_ICON_ONLY' style widget.
     * Notes: Icon-only push button uses a circular container with the icon centered.
     * Formula: iconButtonSize
     * @return The calculated height.
     */
    public static double calculatePushIconOnlyHeight() {
        return ICON_BUTTON_SIZE;
    }

    /**
     * Calculates the required width for a 'CHECK' style widget.
     * Notes: Checkbox with optional text label. The checkbox itself has a fixed size.
     * Formula: checkBoxSize + (hasText ? (checkBoxTextSpacing + (textLength * averageCharWidth)) : 0) + (2 * checkBoxHorizontalPadding)
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @return The calculated width.
     */
    public static double calculateCheckWidth(boolean hasText, double textLength) {
        return CHECK_BOX_SIZE + (hasText ? (CHECK_BOX_TEXT_SPACING + (textLength * AVERAGE_CHAR_WIDTH)) : 0.0) + (2 * CHECK_BOX_HORIZONTAL_PADDING);
    }

    /**
     * Calculates the required height for a 'CHECK' style widget.
     * Notes: Checkbox with optional text label. The checkbox itself has a fixed size.
     * Formula: max(checkBoxSize, defaultFontSize) + (2 * checkBoxVerticalPadding)
     * @return The calculated height.
     */
    public static double calculateCheckHeight() {
        return max(CHECK_BOX_SIZE, DEFAULT_FONT_SIZE) + (2 * CHECK_BOX_VERTICAL_PADDING);
    }

    /**
     * Calculates the required width for a 'RADIO' style widget.
     * Notes: Radio button with optional text label. The radio button itself has a fixed size.
     * Formula: radioButtonSize + (hasText ? (radioButtonTextSpacing + (textLength * averageCharWidth)) : 0) + (2 * radioButtonHorizontalPadding)
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @return The calculated width.
     */
    public static double calculateRadioWidth(boolean hasText, double textLength) {
        return RADIO_BUTTON_SIZE + (hasText ? (RADIO_BUTTON_TEXT_SPACING + (textLength * AVERAGE_CHAR_WIDTH)) : 0.0) + (2 * RADIO_BUTTON_HORIZONTAL_PADDING);
    }

    /**
     * Calculates the required height for a 'RADIO' style widget.
     * Notes: Radio button with optional text label. The radio button itself has a fixed size.
     * Formula: max(radioButtonSize, defaultFontSize) + (2 * radioButtonVerticalPadding)
     * @return The calculated height.
     */
    public static double calculateRadioHeight() {
        return max(RADIO_BUTTON_SIZE, DEFAULT_FONT_SIZE) + (2 * RADIO_BUTTON_VERTICAL_PADDING);
    }

    /**
     * Calculates the required width for a 'DROP_DOWN' style widget.
     * Notes: Dropdown button with text and a dropdown arrow icon. Has a fixed height.
     * Formula: max(dropdownButtonMinWidth, (textLength * averageCharWidth) + dropdownArrowSize + dropdownArrowSpacing + (2 * horizontalPadding))
     * @param textLength A numeric (double) value for textLength.
     * @return The calculated width.
     */
    public static double calculateDropDownWidth(double textLength) {
        return max(DROPDOWN_BUTTON_MIN_WIDTH, (textLength * AVERAGE_CHAR_WIDTH) + DROPDOWN_ARROW_SIZE + DROPDOWN_ARROW_SPACING + (2 * HORIZONTAL_PADDING));
    }

    /**
     * Calculates the required height for a 'DROP_DOWN' style widget.
     * Notes: Dropdown button with text and a dropdown arrow icon. Has a fixed height.
     * Formula: dropdownButtonHeight
     * @return The calculated height.
     */
    public static double calculateDropDownHeight() {
        return DROPDOWN_BUTTON_HEIGHT;
    }

    /**
     * Calculates the required width for a 'SEPARATOR' style widget.
     * Notes: Simple separator with fixed dimensions and customizable thickness.
     * Formula: separatorWidth
     * @return The calculated width.
     */
    public static double calculateSeparatorWidth() {
        return SEPARATOR_WIDTH;
    }

    /**
     * Calculates the required height for a 'SEPARATOR' style widget.
     * Notes: Simple separator with fixed dimensions and customizable thickness.
     * Formula: separatorHeight
     * @return The calculated height.
     */
    public static double calculateSeparatorHeight() {
        return SEPARATOR_HEIGHT;
    }

    /**
     * Calculates the required width for a 'DEFAULT' style widget.
     * Notes: Default fallback style that simply displays text.
     * Formula: textLength * averageCharWidth
     * @param textLength A numeric (double) value for textLength.
     * @return The calculated width.
     */
    public static double calculateDefaultWidth(double textLength) {
        return textLength * AVERAGE_CHAR_WIDTH;
    }

    /**
     * Calculates the required height for a 'DEFAULT' style widget.
     * Notes: Default fallback style that simply displays text.
     * Formula: defaultFontSize * 1.2
     * @return The calculated height.
     */
    public static double calculateDefaultHeight() {
        return DEFAULT_FONT_SIZE * 1.2;
    }

}
