package org.eclipse.swt.internal;

/**
 * Provides sizing constants and calculation methods for the Ctabfolder widget.
 * Generated by WidgetsSizeConstantsGenerator.
 * DO NOT EDIT MANUALLY - Re-generate instead.
 */
public final class CtabfolderSwtSizingConstants {

    private CtabfolderSwtSizingConstants() {
        // Prevent instantiation
    }

    // --- Sizing Constants ---
    public static final double TAB_BAR_HEIGHT = 26.0;
    public static final double TAB_HORIZONTAL_PADDING = 8.0;
    public static final double TAB_VERTICAL_PADDING = 0.0;
    public static final double TAB_BORDER_WIDTH = 1.0;
    public static final double ACTIVE_TAB_INDICATOR_WIDTH = 2.0;
    public static final double TAB_ICON_SIZE = 16.0;
    public static final double TAB_ICON_RIGHT_SPACING = 3.0;
    public static final double CLOSE_ICON_SIZE = 14.0;
    public static final double CLOSE_ICON_LEFT_SPACING = 6.0;
    public static final double TAB_FONT_SIZE = 12.0;
    public static final double AVERAGE_CHAR_WIDTH = 7.0;
    public static final double TEXT_BOTTOM_PADDING = 2.0;

    // --- Size Calculation Methods ---
    /**
     * Calculates the required width for a 'DEFAULT' style widget.
     * Notes: The overall width is determined by the parent container. Height is the sum of the tab bar height and content area height.
     * Formula: containerWidth
     * @param containerWidth A numeric (double) value for containerWidth.
     * @return The calculated width.
     */
    public static double calculateDefaultWidth(double containerWidth) {
        return containerWidth;
    }

    /**
     * Calculates the required height for a 'DEFAULT' style widget.
     * Notes: The overall width is determined by the parent container. Height is the sum of the tab bar height and content area height.
     * Formula: tabBarHeight + contentHeight
     * @param contentHeight A numeric (double) value for contentHeight.
     * @return The calculated height.
     */
    public static double calculateDefaultHeight(double contentHeight) {
        return TAB_BAR_HEIGHT + contentHeight;
    }

    /**
     * Calculates the required width for a 'TAB_BAR' style widget.
     * Notes: The tab bar has a fixed height of 28px and spans the full width of the container.
     * Formula: containerWidth
     * @param containerWidth A numeric (double) value for containerWidth.
     * @return The calculated width.
     */
    public static double calculateTabBarWidth(double containerWidth) {
        return containerWidth;
    }

    /**
     * Calculates the required height for a 'TAB_BAR' style widget.
     * Notes: The tab bar has a fixed height of 28px and spans the full width of the container.
     * Formula: tabBarHeight
     * @return The calculated height.
     */
    public static double calculateTabBarHeight() {
        return TAB_BAR_HEIGHT;
    }

    /**
     * Calculates the required width for a 'TAB' style widget.
     * Notes: Tab width depends on text length, presence of icon, and close button. Height is fixed at 28px.
     * Formula: (hasText ? (textLength * averageCharWidth) : 0) + (2 * tabHorizontalPadding) + (hasIcon ? (tabIconSize + (hasText ? tabIconRightSpacing : 0)) : 0) + (hasCloseButton ? (closeIconSize + closeIconLeftSpacing) : 0)
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @param hasIcon A boolean flag for hasIcon.
     * @param hasCloseButton A boolean flag for hasCloseButton.
     * @return The calculated width.
     */
    public static double calculateTabWidth(boolean hasText, double textLength, boolean hasIcon, boolean hasCloseButton) {
        return (hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0) + (2 * TAB_HORIZONTAL_PADDING) + (hasIcon ? (TAB_ICON_SIZE + (hasText ? TAB_ICON_RIGHT_SPACING : 0.0)) : 0.0) + (hasCloseButton ? (CLOSE_ICON_SIZE + CLOSE_ICON_LEFT_SPACING) : 0.0);
    }

    /**
     * Calculates the required height for a 'TAB' style widget.
     * Notes: Tab width depends on text length, presence of icon, and close button. Height is fixed at 28px.
     * Formula: tabBarHeight
     * @return The calculated height.
     */
    public static double calculateTabHeight() {
        return TAB_BAR_HEIGHT;
    }

    /**
     * Calculates the required width for a 'ACTIVE_TAB' style widget.
     * Notes: Active tab has the same dimensions as regular tabs but includes a top border indicator of 2px.
     * Formula: (hasText ? (textLength * averageCharWidth) : 0) + (2 * tabHorizontalPadding) + (hasIcon ? (tabIconSize + (hasText ? tabIconRightSpacing : 0)) : 0) + (hasCloseButton ? (closeIconSize + closeIconLeftSpacing) : 0)
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @param hasIcon A boolean flag for hasIcon.
     * @param hasCloseButton A boolean flag for hasCloseButton.
     * @return The calculated width.
     */
    public static double calculateActiveTabWidth(boolean hasText, double textLength, boolean hasIcon, boolean hasCloseButton) {
        return (hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0) + (2 * TAB_HORIZONTAL_PADDING) + (hasIcon ? (TAB_ICON_SIZE + (hasText ? TAB_ICON_RIGHT_SPACING : 0.0)) : 0.0) + (hasCloseButton ? (CLOSE_ICON_SIZE + CLOSE_ICON_LEFT_SPACING) : 0.0);
    }

    /**
     * Calculates the required height for a 'ACTIVE_TAB' style widget.
     * Notes: Active tab has the same dimensions as regular tabs but includes a top border indicator of 2px.
     * Formula: tabBarHeight
     * @return The calculated height.
     */
    public static double calculateActiveTabHeight() {
        return TAB_BAR_HEIGHT;
    }

}
