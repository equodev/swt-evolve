package org.eclipse.swt.internal;

import static java.lang.Math.ceil;
import static java.lang.Math.max;

/**
 * Provides sizing constants and calculation methods for the Toolbar widget.
 * Generated by WidgetsSizeConstantsGenerator.
 * DO NOT EDIT MANUALLY - Re-generate instead.
 */
public final class ToolbarSwtSizingConstants {

    private ToolbarSwtSizingConstants() {
        // Prevent instantiation
    }

    // --- Sizing Constants ---
    public static final double TOOLBAR_VERTICAL_PADDING = 5.0;
    public static final double TOOLBAR_HORIZONTAL_PADDING = 4.0;
    public static final double TOOLBAR_BORDER_WIDTH = 1.0;
    public static final double TOOL_ITEM_HEIGHT = 28.0;
    public static final double TOOL_ITEM_HORIZONTAL_PADDING = 8.0;
    public static final double TOOL_ITEM_OUTER_HORIZONTAL_PADDING = 2.0;
    public static final double TOOL_ITEM_MIN_WIDTH = 16.0;
    public static final double SEPARATOR_WIDTH = 16.0;
    public static final double SEPARATOR_THICKNESS = 1.0;
    public static final double SEPARATOR_INDENT = 8.0;
    public static final double SEPARATOR_END_INDENT = 8.0;
    public static final double TOOL_ITEM_FONT_SIZE = 12.0;
    public static final double AVERAGE_CHAR_WIDTH = 7.0;
    public static final double DEFAULT_ICON_SIZE = 16.0;
    public static final double ICON_TEXT_SPACING = 4.0;
    public static final double BORDER_RADIUS = 4.0;

    // --- Size Calculation Methods ---
    /**
     * Calculates the required width for a 'HORIZONTAL' style widget.
     * Notes: Standard horizontal toolbar. Width depends on number of items and separators. For more accurate width, use sum of individual item widths instead of the approximation.
     * Formula: itemCount * (toolItemMinWidth + 2 * toolItemHorizontalPadding + 2 * toolItemOuterHorizontalPadding) + separatorCount * separatorWidth + 2 * toolbarHorizontalPadding
     * @param itemCount A numeric (double) value for itemCount.
     * @param separatorCount A numeric (double) value for separatorCount.
     * @return The calculated width.
     */
    public static double calculateHorizontalWidth(double itemCount, double separatorCount) {
        return itemCount * (TOOL_ITEM_MIN_WIDTH + 2 * TOOL_ITEM_HORIZONTAL_PADDING + 2 * TOOL_ITEM_OUTER_HORIZONTAL_PADDING) + separatorCount * SEPARATOR_WIDTH + 2 * TOOLBAR_HORIZONTAL_PADDING;
    }

    /**
     * Calculates the required height for a 'HORIZONTAL' style widget.
     * Notes: Standard horizontal toolbar. Width depends on number of items and separators. For more accurate width, use sum of individual item widths instead of the approximation.
     * Formula: toolItemHeight + 2 * toolbarVerticalPadding + toolbarBorderWidth
     * @return The calculated height.
     */
    public static double calculateHorizontalHeight() {
        return TOOL_ITEM_HEIGHT + 2 * TOOLBAR_VERTICAL_PADDING + TOOLBAR_BORDER_WIDTH;
    }

    /**
     * Calculates the required width for a 'VERTICAL' style widget.
     * Notes: Vertical toolbar (SWT.VERTICAL). Height depends on number of items and separators. Width is determined by the widest item.
     * Formula: max(toolItemMinWidth + 2 * toolItemHorizontalPadding, maxTextLength * averageCharWidth + 2 * toolItemHorizontalPadding, defaultIconSize + 2 * toolItemHorizontalPadding) + 2 * toolbarHorizontalPadding
     * @param maxTextLength A numeric (double) value for maxTextLength.
     * @return The calculated width.
     */
//    public static double calculateVerticalWidth(double maxTextLength) {
//        return max(TOOL_ITEM_MIN_WIDTH + 2 * TOOL_ITEM_HORIZONTAL_PADDING, maxTextLength * AVERAGE_CHAR_WIDTH + 2 * TOOL_ITEM_HORIZONTAL_PADDING, DEFAULT_ICON_SIZE + 2 * TOOL_ITEM_HORIZONTAL_PADDING) + 2 * TOOLBAR_HORIZONTAL_PADDING;
//    }

    /**
     * Calculates the required height for a 'VERTICAL' style widget.
     * Notes: Vertical toolbar (SWT.VERTICAL). Height depends on number of items and separators. Width is determined by the widest item.
     * Formula: itemCount * (toolItemHeight + 2 * toolItemOuterHorizontalPadding) + separatorCount * separatorWidth + 2 * toolbarVerticalPadding + toolbarBorderWidth
     * @param itemCount A numeric (double) value for itemCount.
     * @param separatorCount A numeric (double) value for separatorCount.
     * @return The calculated height.
     */
    public static double calculateVerticalHeight(double itemCount, double separatorCount) {
        return itemCount * (TOOL_ITEM_HEIGHT + 2 * TOOL_ITEM_OUTER_HORIZONTAL_PADDING) + separatorCount * SEPARATOR_WIDTH + 2 * TOOLBAR_VERTICAL_PADDING + TOOLBAR_BORDER_WIDTH;
    }

    /**
     * Calculates the required width for a 'WRAP' style widget.
     * Notes: Wrapping toolbar (SWT.WRAP). Height depends on container width and total width of all items. Width is constrained by container.
     * Formula: containerWidth
     * @param containerWidth A numeric (double) value for containerWidth.
     * @return The calculated width.
     */
    public static double calculateWrapWidth(double containerWidth) {
        return containerWidth;
    }

    /**
     * Calculates the required height for a 'WRAP' style widget.
     * Notes: Wrapping toolbar (SWT.WRAP). Height depends on container width and total width of all items. Width is constrained by container.
     * Formula: ceil(totalItemsWidth / containerWidth) * (toolItemHeight + 2 * toolItemOuterHorizontalPadding) + 2 * toolbarVerticalPadding + toolbarBorderWidth
     * @param ceil A numeric (double) value for ceil.
     * @param totalItemsWidth A numeric (double) value for totalItemsWidth.
     * @param containerWidth A numeric (double) value for containerWidth.
     * @return The calculated height.
     */
    public static double calculateWrapHeight(double ceil, double totalItemsWidth, double containerWidth) {
        return ceil(totalItemsWidth / containerWidth) * (TOOL_ITEM_HEIGHT + 2 * TOOL_ITEM_OUTER_HORIZONTAL_PADDING) + 2 * TOOLBAR_VERTICAL_PADDING + TOOLBAR_BORDER_WIDTH;
    }

    /**
     * Calculates the required width for a 'TOOL_ITEM' style widget.
     * Notes: Individual tool item dimensions. Used to calculate more precise toolbar dimensions by summing individual item widths.
     * Formula: max(toolItemMinWidth, (hasText ? (textLength * averageCharWidth) : 0) + (hasImage ? defaultIconSize : 0) + (hasText && hasImage ? iconTextSpacing : 0) + 2 * toolItemHorizontalPadding)
     * @param hasText A boolean flag for hasText.
     * @param textLength A numeric (double) value for textLength.
     * @param hasImage A boolean flag for hasImage.
     * @return The calculated width.
     */
    public static double calculateToolItemWidth(boolean hasText, double textLength, boolean hasImage) {
        return max(TOOL_ITEM_MIN_WIDTH, (hasText ? (textLength * AVERAGE_CHAR_WIDTH) : 0.0) + (hasImage ? DEFAULT_ICON_SIZE : 0.0) + (hasText && hasImage ? ICON_TEXT_SPACING : 0.0) + 2 * TOOL_ITEM_HORIZONTAL_PADDING);
    }

    /**
     * Calculates the required height for a 'TOOL_ITEM' style widget.
     * Notes: Individual tool item dimensions. Used to calculate more precise toolbar dimensions by summing individual item widths.
     * Formula: toolItemHeight
     * @return The calculated height.
     */
    public static double calculateToolItemHeight() {
        return TOOL_ITEM_HEIGHT;
    }

    /**
     * Calculates the required width for a 'SEPARATOR' style widget.
     * Notes: Separator dimensions. In horizontal toolbar, separator is vertical divider.
     * Formula: separatorWidth
     * @return The calculated width.
     */
    public static double calculateSeparatorWidth() {
        return SEPARATOR_WIDTH;
    }

    /**
     * Calculates the required height for a 'SEPARATOR' style widget.
     * Notes: Separator dimensions. In horizontal toolbar, separator is vertical divider.
     * Formula: toolItemHeight - separatorIndent - separatorEndIndent
     * @return The calculated height.
     */
    public static double calculateSeparatorHeight() {
        return TOOL_ITEM_HEIGHT - SEPARATOR_INDENT - SEPARATOR_END_INDENT;
    }

}
